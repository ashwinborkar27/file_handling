7. Read file and get only number from it, saying: line_number: number list

File.open("d:output.txt").each do |line|
   puts line, $.
 end
"this is my file handling work is The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ...The canonical way to create a file object is by using the open() function. ... characters starting from the current reading position up to a newline character. ... The readline() method will return the first line, and then will point to the second line in the file. ... Use the 'rb' mode in the open() function to read a binary files, as shown ..."
1
=> #<File:d:output.txt>

def get_line_number(file, word)
  count = 0
  file = File.open("d:output.txt", "r") { |file| file.each_line { |line|
  count += 1
    return count if line =~ /#{word}/
    }}
 end
=> :get_line_number

real 0.10
user 0.08
sys 0.03